[project]
name = "py-spotify-playlist"
version = "0.1.0"
description = ""
authors = [
    { name = "Raphael Coelho", email = "raphael.phael@gmail.com" }
]
readme = "README.md"
requires-python = ">=3.13"

dependencies = [
    "flask>=3.1.1",
    "flask-talisman>=1.1.0",
    "python-dotenv>=1.1.0",
    "pyyaml>=6.0.2",
    "spotipy>=2.25.1",
    "tzdata>=2025.2",
]

[project.optional-dependencies]
dev = [
    "ruff>=0.11.0",
    "pytest>=8.3.4",
    "pre-commit>=4.2.0",
    "pytest-cov>=6.0.0",
]

[tool.ruff]
fix = true               # Ativa correções automáticas
target-version = "py313" # Compatível com Python 3.13
lint.select = ["ALL"]    # Ativa todas as regras de linting, análise e estilo
lint.unfixable = []      # Permite todas as correções
lint.isort.force-sort-within-sections = true # Força a ordenação dentro de seções
lint.isort.combine-as-imports = true         # Permite importações combinadas
lint.ignore = [
    "D203",              # Conflito com D211 (linha em branco antes da classe)
    "D212",              # Conflito com D213 (resumo na primeira linha)
    "COM812",            # Conflito com formatador (vírgula ausente)
    "ISC001",            # Já corrigido pelo formatador (concatenação implícita)
    "G004",              # Já corrigido pelo formatador (no-else-return)
    "S101",              # Permite o uso de assert para depuração
    "PERF401",           # Permite o uso de for-loop em vez de list comprehension para maior clareza
    "T201",              # Permite o uso de print para depuração
    "ERA001",            # Permite o uso de comentários de código comentado
    "T203",              # Permite o uso de pprint para depuração
    "ANN401",            # Permite o uso de Any em retornos de função para maior flexibilidade
    "S105",              # Permite o uso de senhas hardcoded em casos específicos
    "TRY003",            # Permite o uso de mensagens longas fora da classe de exceção
    "S603",              # Permite subprocessos com entrada não confiável
    "RUF001",            # Permite strings com hífen ambíguo (EN DASH)

    # Permissõs temporárias para facilitar o desenvolvimento
    "F401",              # Ignora a regra que exige a remoção de importações não utilizadas

    # Permissões para `TODO` e `FIXME`
    "TD001",             # Permite `TODO`  sem descrição detalhada
    "TD003",             # Permite `TODO`  sem link para issue
    "TD002",             # Permite `TODO`  sem identificação do autor
    "FIX001",            # Permite `FIXME` sem descrição detalhada
    "FIX003",            # Permite `FIXME` sem link para issue
    "FIX002",            # Permite `FIXME` sem ser tratado como erro crítico
    "EM101",             # Permite o uso de string literal diretamente em exceções
]
line-length = 100        # Define o comprimento da linha para 100 caracteres
exclude = [
    ".venv",
    "__pycache__",
]

[tool.ruff.format]
quote-style = "double"            # Usar aspas duplas (Black)
indent-style = "space"            # Indentação com espaços (Black)
skip-magic-trailing-comma = false # Manter vírgula mágica (Black)
line-ending = "auto"              # Detectar o tipo de quebra de linha (Black)

[tool.ruff.lint.pydocstyle]
convention = "google"             # Exigir docstrings ("numpy" ou "pep257")

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true           # Exigir anotações de tipo em __init__ e __new__
suppress-none-returning = false   # Não suprimir erros de retorno None
allow-star-arg-any = false        # Não permitir *args e **kwargs sem anotações de tipo

[tool.pytest.ini_options]
pythonpath = [".","src"]         # Adiciona o diretório atual ao PYTHONPATH

[project.urls]
repository = "https://github.com/pagueru"

[tool.hatch.build.targets.wheel]
packages = [".","src"]
